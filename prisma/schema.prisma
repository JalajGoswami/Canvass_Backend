generator client {
  provider        = "prisma-client-js"
  // binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model EmailAddress {
  email             String  @id @unique
  verification_code Int
  isVerified        Boolean @default(false)
  user              User?
}

model User {
  id                  Int            @id @default(sequence())
  emailAddr           EmailAddress   @relation(fields: [email], references: [email])
  email               String         @unique
  user_name           String         @unique
  full_name           String
  password            String
  profile_pic         String?
  about               String?
  website             String?
  private             Boolean        @default(false)
  created_at          DateTime       @default(now())
  createdPosts        Post[]         @relation("CreatedPosts")
  likedPosts          Post[]         @relation("LikedPosts")
  dislikedPosts       Post[]         @relation("DislikedPosts")
  savedPosts          Post[]         @relation("SavedPosts")
  prefrence           UserPrefrence?
  follows             Follow[]       @relation("Follows")
  followedBy          Follow[]       @relation("FollowedBy")
  comments            Comment[]      @relation("CreatedComment")
  mentionedComments   Comment[]      @relation("CommentMention")
  sentMessages        Message[]      @relation("SentMessage")
  receivedMessages    Message[]      @relation("ReceivedMessage")
  notifications       Notification[]
  taggedNotifications Notification[] @relation("TaggedNotification")
}

model Follow {
  id           Int      @id @default(sequence())
  user         User     @relation("Follows", fields: [userId], references: [id])
  userId       Int
  follows      User     @relation("FollowedBy", fields: [followedUser], references: [id])
  followedUser Int
  followedAt   DateTime @default(now())
}

model Post {
  id            Int            @id @default(sequence())
  author        User           @relation("CreatedPosts", fields: [authorId], references: [id])
  authorId      Int
  body          String
  image         String?
  aspect_ratio  Float?
  likedBy       User[]         @relation("LikedPosts")
  dislikedBy    User[]         @relation("DislikedPosts")
  savedBy       User[]         @relation("SavedPosts")
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    Int
  tags          Tag[]
  comments      Comment[]
  created_at    DateTime       @default(now())
  notifications Notification[]
}

model UserPrefrence {
  id         Int        @id @default(sequence())
  user       User       @relation(fields: [userId], references: [id])
  userId     Int        @unique
  categories Category[]
}

model Category {
  id          Int             @id @default(sequence())
  name        String
  image       String
  tags        Tag[]
  Post        Post[]
  preferredBy UserPrefrence[]
}

model Tag {
  id         Int        @id @default(sequence())
  name       String     @unique
  categories Category[]
  posts      Post[]
  appearance Int        @default(1)
}

model Comment {
  id            Int            @id @default(sequence())
  post          Post           @relation(fields: [postId], references: [id])
  postId        Int
  body          String
  author        User           @relation("CreatedComment", fields: [authorId], references: [id])
  authorId      Int
  parent        Comment        @relation("replies", fields: [parentId], references: [id])
  replies       Comment[]      @relation("replies")
  parentId      Int
  replyTo       User?          @relation("CommentMention", fields: [replyToId], references: [id])
  replyToId     Int?
  created_at    DateTime       @default(now())
  notifications Notification[]
}

model Message {
  id          Int       @id @default(sequence())
  from        User      @relation("SentMessage", fields: [fromId], references: [id])
  fromId      Int
  to          User      @relation("ReceivedMessage", fields: [toId], references: [id])
  toId        Int
  messageType String
  body        String
  status      String
  seen_at     DateTime?
  created_at  DateTime  @default(now())
}

model Notification {
  id           Int      @id @default(sequence())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  body         String
  type         String
  taggedUser   User     @relation("TaggedNotification", fields: [taggedUserId], references: [id])
  taggedUserId Int
  post         Post?    @relation(fields: [postId], references: [id])
  postId       Int?
  comment      Comment? @relation(fields: [commentId], references: [id])
  commentId    Int?
  created_at   DateTime @default(now())
}
